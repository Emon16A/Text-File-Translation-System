
Create a text file translation microservice using FastAPI, deploy it on Render (free tier), 
and provide Loom video walkthrough to explain the application flow. This service will allow 
users to upload a text file, select a target language, and download a translated file. Use WebSocket for realtime status updates, background tasks for processing, MongoDB Atlas to save user history, and an LLM API (e.g., Gemini, free tier) for translation. 
You should include the frontend (HTML and CSS) within the same FastAPI project.

### Task Requirements:

#### 1. **File Upload & Language Selection (FastAPI + HTML/CSS)**
    **Frontend**: Create a basic HTML page with:
      A file upload field (only `.txt` files allowed).
      A dropdown menu to select the target language (e.g., French, Spanish, German).
      A “Translate” button for submission.
    **FastAPI Endpoint**: 
      Implement an endpoint that receives the uploaded file and the chosen language.
      Temporarily store the file on the server for processing.

#### 2. **RealTime Translation Status Updates (WebSocket)**
    **WebSocket Endpoint**:
      Establish a WebSocket connection to send realtime status updates to the user during translation (e.g., "File received," "Translating," "Translation complete").
    **Frontend Integration**:
      Connect the WebSocket to display live status messages on the frontend.

#### 3. **Text Translation Using LLM API (Gemini or GPT)**
    **LLM Integration**:
      Use the free tier of the Gemini API (or GPT) for translation.
      Send the text extracted from the uploaded file along with the target language to the API for translation.

#### 4. **Background Processing (FastAPI Background Task)**
    **Background Task**:
      Use FastAPI background tasks to handle the translation process without blocking the main thread.
      Save the translated content as a new `.txt` file and notify the WebSocket once it’s ready for download.

#### 5. **Download Translated File**
    **FastAPI Endpoint**:
      Create an endpoint to allow users to download the translated file.
    **Frontend Update**:
      Provide a download link once the translation is complete.

### 6. **MongoDB Atlas Integration for File History**
    **MongoDB Atlas**:
      Use MongoDB Atlas to store a user's session data and their processed files.
      For each session, store the following information:
        `sessionId` (unique identifier)
        `createdAt` (timestamp)
        `filesProcessed` (array of file objects, each containing):
          `fileName`
          `filePath`
          `processedAt` (timestamp)
          `result` (translated text or error message)
    **Backend Implementation**:
      Store the file data in MongoDB Atlas after processing, including the file name, path, and result of the translation.
      Create a simple data model for managing file history.

#### 7. **Session Management using LocalStorage**
    **Frontend**:
      No login required. Instead, use `localStorage` to save a unique session ID for the user.
      The session ID should be sent along with the file upload request to associate each session with their corresponding translation history.
    **User History**:
      Display a page that shows all processed files for the current session. This page should list:
        File name
        Status (completed or in progress)
        Date of processing
        Option to download the translated file.

#### 8. **Display Processed Files**
    **Frontend Page**:
      Create a separate page that shows the history of processed files.
      The page should retrieve data from MongoDB Atlas and display each file with the following:
        File name
        Date processed
        Translation status
        Option to download the translated file.
      This page should be accessible to the user without requiring login.

#### 9. **Swagger API Documentation (Optional)**
    **FastAPI Swagger**: 
      Implement Swagger documentation for your API. 
      Include API endpoints for file upload, file history retrieval, file download, and WebSocket connections.



### Deployment Instructions

1. **Deployment on Render (Free Tier)**:
    Deploy your FastAPI application on [Render.com](https://render.com/) using its free tier.
    Include the deployed application link in your submission.

2. **Usage of Gemini (Free Tier)**:
    Set up Gemini API (or an alternative LLM API with a free tier) for translation.
    Ensure your application uses the free tier effectively to perform translations.



### Deliverables:

1. **Links**:
    **Render Deployment URL**: Provide the deployed app link from Render’s free tier.
    **GitHub Repository**: Include the repository link with your code and setup instructions.

2. **Loom Video (5Minute Walkthrough)**:
    Record a 5minute Loom video explaining:
      The purpose of the application and its functionality.
      Steps to upload a file, select a language, and receive status updates.
      Downloading the translated file after completion.
      Navigating to the history page to view processed files.
    **Link**: Share the Loom video URL with the submission.

3. **Codebase**:
    FastAPI application code with endpoints for file upload, WebSocket updates, translation processing, file download, and history retrieval.
    HTML/CSS frontend included within the same FastAPI project.
    MongoDB Atlas integration for storing and retrieving file history.

4. **README**:
    Clear setup instructions, including any required environment variables or API keys.

**Bonus Points:** 
 Add error handling for file types and unsupported languages.
 Use basic CSS to improve the frontend design.



### Notes:
 All code, including HTML/CSS and MongoDB integration, should be included within the FastAPI project, no separate repositories are needed.
 Be sure to test the entire flow, including the frontend, translation processing, history page, and file download.


